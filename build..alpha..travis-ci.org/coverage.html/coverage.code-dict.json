{"/home/travis/build/npmtest/node-npmtest-grunt-jsbeautifier/test.js":"/* istanbul instrument in package npmtest_grunt_jsbeautifier */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireExampleJsFromReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - post-init\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - post-init\n    case 'browser':\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-grunt-jsbeautifier/lib.npmtest_grunt_jsbeautifier.js":"/* istanbul instrument in package npmtest_grunt_jsbeautifier */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_grunt_jsbeautifier = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_grunt_jsbeautifier = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-grunt-jsbeautifier/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-grunt-jsbeautifier && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_grunt_jsbeautifier */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_grunt_jsbeautifier\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // post-init\n    // run browser js-env code - post-init\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_grunt_jsbeautifier.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        local.assetsDict['/assets.npmtest_grunt_jsbeautifier.rollup.js'] =\n            local.assetsDict['/assets.npmtest_grunt_jsbeautifier.rollup.js'] ||\n            local.fs.readFileSync(\n                // buildCustomOrg-hack\n                local.npmtest_grunt_jsbeautifier.__dirname +\n                    '/lib.npmtest_grunt_jsbeautifier.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-grunt-jsbeautifier/node_modules/grunt-jsbeautifier/Gruntfile.js":"\"use strict\";\n\nmodule.exports = function(grunt) {\n    require('load-grunt-tasks')(grunt);\n    grunt.initConfig({\n        jshint: {\n            files: [\"package.json\", \"Gruntfile.js\", \"lib/**/*.js\", \"tasks/**/*.js\", \"test/**/*.js\"],\n            options: {\n                jshintrc: true\n            }\n        },\n        jsbeautifier: {\n            default: {\n                src: [\"<%= jshint.files %>\", \"!test/fixtures/**\", \"package.json\"]\n            }\n        },\n        copy: {\n            tmp: {\n                src: [\"**\"],\n                dest: \"tmp\",\n                cwd: \"test/fixtures\",\n                expand: true\n            }\n        },\n        clean: [\"tmp\", \"dest\"],\n        mochaTest: {\n            test: {\n                options: {\n                    reporter: 'spec'\n                },\n                src: ['test/**/*_spec.js']\n            }\n        },\n        devUpdate: {\n            main: {\n                options: {\n                    updateType: 'force',\n                    reportUpdated: false,\n                    packages: {\n                        devDependencies: true,\n                        dependencies: true\n                    }\n                }\n            }\n        }\n    });\n\n    // Actually load this plugin\"s task(s).\n    grunt.loadTasks(\"tasks\");\n\n    // By default, beautify, lint and run all tests.\n    grunt.registerTask(\"test\", [\"jshint\", \"copy\", \"clean\", \"mochaTest\"]);\n    grunt.registerTask(\"default\", [\"devUpdate\", \"test\", \"jsbeautifier:default\"]);\n};\n","/home/travis/build/npmtest/node-npmtest-grunt-jsbeautifier/node_modules/grunt-jsbeautifier/lib/jsBeautifyVersion.js":"\"use strict\";\n\nvar grunt = require(\"grunt\"),\n    semver = require(\"semver\"),\n    spawnOptions = {\n        cmd: \"npm\",\n        grunt: false,\n        opts: {\n            cwd: __dirname\n        }\n    };\n\nfunction updateJsBeautify(version, done) {\n    spawnOptions.args = [\"install\", \"js-beautify@\" + version];\n    grunt.util.spawn(spawnOptions, done);\n}\n\nmodule.exports = function verifyJsBeautifyVersion(version, done) {\n    if (!version) {\n        return done();\n    }\n    spawnOptions.args = [\"list\", \"js-beautify\", \"--json\"];\n    grunt.util.spawn(spawnOptions, function(error, result) {\n        if (error) {\n            return done(error);\n        }\n        var jsonResults = JSON.parse(result.stdout),\n            jsBeautify = jsonResults.dependencies && jsonResults.dependencies[\"js-beautify\"];\n        if (!semver.satisfies(jsBeautify.version, version)) {\n            grunt.log.writeln(\"Updating version of js-beautify to \" + version);\n            return updateJsBeautify(version, done);\n        }\n        grunt.verbose.writeln(\"Version of js-beautify is already updated \" + version);\n        return done();\n    });\n\n};\n","/home/travis/build/npmtest/node-npmtest-grunt-jsbeautifier/node_modules/grunt-jsbeautifier/lib/jsbeautifier.js":"\"use strict\";\n\nvar path = require(\"path\"),\n    grunt = require(\"grunt\"),\n    _ = require(\"lodash\"),\n    async = require(\"async\"),\n    stringUtils = require(\"underscore.string\"),\n    JsBeautifierTask = function(task) {\n        // Store reference to original task\n        this.task = task;\n        var args = {};\n\n        task.args.forEach(function(item, index) {\n            if (index % 2 === 0) {\n                args[item] = task.args[index + 1];\n            }\n        });\n        this.args = args;\n\n        // Merge task options with defaults\n        this.options = task.options(JsBeautifierTask.DEFAULT_OPTIONS);\n    },\n    addJsNewLine = true,\n    jsBeautifyVersion = require(\"./jsBeautifyVersion\");\n\n/**\n * Default options that will be merged with options specified in\n * the original task.\n *\n * @type {*}\n */\nJsBeautifierTask.DEFAULT_OPTIONS = {\n    mode: \"VERIFY_AND_WRITE\",\n    dest: \"\",\n    js: {},\n    css: {},\n    html: {}\n};\n\n/**\n * Static method for registering an instance of the task with Grunt.\n *\n * @param {*} grunt\n */\nJsBeautifierTask.registerWithGrunt = function(grunt) {\n    grunt.registerMultiTask(\"jsbeautifier\", \"jsbeautifier.org for grunt\", function() {\n        var task = new JsBeautifierTask(this);\n        task.run();\n    });\n};\n\nfunction getFileType(file, config) {\n    var fileType = null,\n        fileMapping = {\n            \"js\": config.js.fileTypes,\n            \"css\": config.css.fileTypes,\n            \"html\": config.html.fileTypes\n        };\n    _.forEach(fileMapping, function(extensions, type) {\n        fileType = type;\n        return -1 === _.findIndex(extensions, function(ext) {\n            return stringUtils.endsWith(file, ext);\n        });\n    });\n    return fileType;\n}\n\nfunction getBeautifierSetup(file, config) {\n    var fileType = getFileType(file, config),\n        jsBeautify = require(\"js-beautify\");\n    switch (fileType) {\n        case \"js\":\n            return [jsBeautify.js, config.js, addJsNewLine];\n        case \"css\":\n            return [jsBeautify.css, config.css];\n        case \"html\":\n            return [jsBeautify.html, config.html];\n        default:\n            grunt.fail.warn(\"Cannot beautify \" + file.cyan + \" (only js, css and html files can be beautified)\");\n            return null;\n    }\n}\n\nfunction beautify(file, config, actionHandler) {\n    var setup = getBeautifierSetup(file, config);\n    if (!setup) {\n        return;\n    }\n\n    var beautifier = setup[0],\n        beautifyConfig = setup[1],\n        addNewLine = setup[2];\n\n    var original = grunt.file.read(file);\n    grunt.verbose.write(\"Beautifying \" + file.cyan + \"...\");\n    var result = beautifier(original, beautifyConfig);\n\n    // jsbeautifier would skip the line terminator for js files\n    if (!result.charAt(result.length - 1).match(/[\\n\\r\\u2028\\u2029]/) && addNewLine) {\n        result += \"\\n\";\n    }\n    grunt.verbose.ok();\n    /*jshint eqeqeq: false */\n    if (original != result) {\n        actionHandler(file, result);\n    }\n}\n\nJsBeautifierTask.prototype.run = function() {\n    var options = this.options,\n        args = this.args;\n\n    var fileCount = 0,\n        changedFileCount = 0,\n        unVerifiedFiles = [];\n\n    function verifyActionHandler(src) {\n        unVerifiedFiles.push(src);\n    }\n\n    function verifyAndWriteActionHandler(src, result) {\n        grunt.verbose.writeln(options.dest + src);\n        grunt.file.write(options.dest + src, result);\n        changedFileCount++;\n    }\n\n    function convertCamelCaseToUnderScore(config) {\n        var underscoreKey;\n        _.forEach([config.js, config.css, config.html], function(conf) {\n            _.forEach(conf, function(value, key) {\n                underscoreKey = stringUtils.underscored(key);\n                if (\"fileTypes\" !== key && key !== underscoreKey) {\n                    conf[underscoreKey] = value;\n                    delete conf[key];\n                }\n            });\n        });\n    }\n\n    function getConfig() {\n        var config,\n            rcFile = require(\"rc\")(\"jsbeautifier\", {});\n\n        if (options.config || !_.isEqual(rcFile, {})) {\n            var baseConfig = options.config ? grunt.file.readJSON(path.resolve(options.config)) : rcFile;\n            config = {\n                js: {},\n                css: {},\n                html: {}\n            };\n            if (!baseConfig.js && !baseConfig.css && !baseConfig.html) {\n                _.extend(config.js, baseConfig);\n                _.extend(config.css, baseConfig);\n                _.extend(config.html, baseConfig);\n            }\n            _.extend(config.js, baseConfig.js);\n            _.extend(config.css, baseConfig.css);\n            _.extend(config.html, baseConfig.html);\n            _.extend(config.js, options.js);\n            _.extend(config.css, options.css);\n            _.extend(config.html, options.html);\n        } else {\n            config = options;\n        }\n        config.js.fileTypes = _.union(config.js.fileTypes, [\".js\", \".json\", '.es6']);\n        config.css.fileTypes = _.union(config.css.fileTypes, [\".css\"]);\n        config.html.fileTypes = _.union(config.html.fileTypes, [\".html\"]);\n\n        grunt.verbose.writeln(\"Beautify config before converting camelcase to underscore: \" + JSON.stringify(config));\n\n        convertCamelCaseToUnderScore(config);\n\n        grunt.verbose.writeln(\"Using beautify config: \" + JSON.stringify(config));\n        return config;\n    }\n\n    var sourceFiles = this.task.files,\n        done = this.task.async();\n    if ((sourceFiles && sourceFiles.length > 0) || !_.isEmpty(args.file)) {\n        if (!_.isEmpty(options.dest)) {\n            grunt.verbose.writeln(\"All beautified files will be stored under \\\"\" + options.dest + \"\\\" folder\");\n            if (!stringUtils.endsWith(options.dest, \"/\")) {\n                options.dest += \"/\";\n            }\n        }\n\n        grunt.verbose.writeln(\"Using mode=\\\"\" + options.mode + \"\\\"...\");\n        var actionHandler = \"VERIFY_ONLY\" === options.mode ? verifyActionHandler : verifyAndWriteActionHandler,\n            config = getConfig();\n\n        /** Add new line for js file unless specified as false */\n        addJsNewLine = config.js.end_with_newline !== false;\n\n        jsBeautifyVersion(options.jsBeautifyVersion, function(error) {\n            if (error) {\n                grunt.fail.fatal(\"Unable to update js-beautify version to \" + options.jsBeautifyVersion + \" due to \\n\" + error);\n                return done(error);\n            }\n            var q = async.queue(function(src, callback) {\n                if (grunt.file.isDir(src)) {\n                    callback();\n                    return;\n                }\n\n                beautify(src, config, actionHandler);\n                fileCount++;\n                callback();\n            }, 10);\n\n            q.drain = function() {\n                if (unVerifiedFiles.length) {\n                    grunt.fail.warn(\"The following files are not beautified:\\n\" + unVerifiedFiles.join(\"\\n\").cyan + \"\\n\");\n                }\n                grunt.log.write(\"Beautified \" + fileCount.toString().cyan + \" files, changed \" + changedFileCount.toString().cyan + \" files...\");\n                grunt.log.ok();\n                done();\n            };\n\n            if (!_.isEmpty(args.file)) {\n                q.push(args.file);\n            } else {\n                sourceFiles.forEach(function(fileset) {\n                    q.push(fileset.src);\n                });\n            }\n        });\n    }\n};\n\nmodule.exports = JsBeautifierTask;\n"}